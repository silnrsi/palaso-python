#!/usr/bin/python

import codecs
from palaso.font.shape import make_shaper
from optparse import OptionParser
from difflib import SequenceMatcher
from fontTools.ttLib import TTFont
import sys, os, shutil, re

tables = {
    'gr' : ('GDEF', 'GSUB', 'GPOS'),
    'ot' : ('Gloc', 'Glat', 'Silf', 'Sill', 'Feat'),
    'hb' : (),
    'hbot' : ('Gloc', 'Glat', 'Silf', 'Sill', 'Feat'),
    'icu' : ('Gloc', 'Glat', 'Silf', 'Sill', 'Feat')
}

def roundpt(pt, res) :
    try :
        return(int(pt[0] / res) * res, int(pt[1] / res) * res)
    except ValueError :
        pass
    return (0, 0)

def name(tt, gl) :
    return (tt.getGlyphName(gl[0]) if gl[0] else None, roundpt(gl[1], 0.1))

def cmaplookup(tt, c) :
    cmap = tt['cmap'].getcmap(3, 1) or tt['cmap'].getcmap(1, 0)
    if cmap :
        return cmap.cmap.get(ord(c), '.notdef')
    return '.notdef'

def logstart(f, fpaths, args, inputs) :
    temps = ("""
    @font-face {{
        font-family: testfont{1};
        src: url('{0}');
    }}
    .text{1} {{
        font-family: testfont{1};
    }}""",
    """<tr><td>{2}:</td><td>{3}</td></tr>
""")
    _strs = []
    for i in range(len(fpaths)) :
        _strs.append(map(lambda x:x.format(fpaths[i], i+1, args.label[i], inputs[i]), temps))
    strs = map(lambda x:"".join(x), zip(*_strs))
    
    f.write("""<html><head>
<meta charset="UTF8"/>
<style>
    {0[0]}
    .eq {{
        font-family: monospace;
        color: black;
        vertical-align: text-top;
    }}
    .neq {{
        font-family: monospace;
        color: red;
        vertical-align: text-top;
    }}
    table, th, td {{
        border-collapse: collapse;
        border: 1px solid grey;
        padding: 5px;
    }}
</style></head><body>
<table>
    {0[1]}
    <tr><td>Test document:</td><td>{1}</td></tr>
    <tr><td>Engine:</td><td>{2}</td></tr>
    <tr><td>Language:</td><td>{3}</td></tr>
    <tr><td>Script:</td><td>{4}</td></tr>
    <tr><td>Features:</td><td>{5}</td></tr>
</table>
<p/>
<table>
""".format( strs,
            args.text,
            args.engine, 
            args.lang if args.lang != 0 else '', 
            args.script if args.script != 0 else '', 
            ", ".join(args.feat if args.feat is not None else [])))
    if args.label is not None and len(args.label) :
        f.write("<tr><th></th><th>Original</th><th>{}</th>".format(args.label[0]))
        for i in range(1, len(args.label)) :
            f.write("<th>{0}</th><th>{1}</th><th>{1}</th>".format(args.label[0], args.label[i]))
        f.write("</tr>\n")

def ftostr(x, dp=2) :
    res = ("{:." + str(dp) + "f}").format(x)
    if res.endswith("." + ("0" * dp)) :
        res = res[:-dp-1]
    else :
        res = re.sub(r"0*$", "", res)
    return res

def strpoint(p) :
    return "("+",".join(map(ftostr, p))+")"

def style(g, c = 'neq') :
    return "<span class='{}'>{}:\t{}</span>".format(c, g[0], strpoint(g[1]))

def diffpos(l, r, lprev, rprev) :
    res = [("<span class='eq'>{}:\t(</span>".format(l[0]), "<span class='eq'>{}:\t(</span>".format(r[0]))]
    for i in range(0, 2) :
        s = ',' if i == 0 else ')'
        c = 'eq' if l[1][i] - lprev[1][i] == r[1][i] - rprev[1][i] else 'neq'
        u = []
        for t in (l[1][i], r[1][i]) :
            u.append("<span class='{}'>{}</span>{}".format(c, ftostr(t), s))
        res.append(u)
    return map(lambda x: "".join(x), zip(*res))

def logentry(f, line, word, string, gglyphs, opts, bases) :
    langstr = " lang='{}'".format(opts.lang) if opts.lang else ""
    f.write(u"  <tr><td>{0}.{1}</td><td class='eq'>{4}</td><td class='text1'{3}>{2}</td>\n".format(line, word, string, langstr, u"<br/>".join(map(lambda x:x[0], bases))))
    if len(gglyphs) < 2 :
        f.write(u"    <td class='eq'>{0}</td>\n".format(u"<br/>".join(map(lambda x:"{}:\t{}".format(x[0], strpoint(x[1])), gglyphs[0]))))
        f.write("    </tr>\n")
        return
    def getname(t) :
        return str(t[0])
    for l in range(1, len(gglyphs)) :
        s = SequenceMatcher(None, map(getname, gglyphs[0]), map(getname, gglyphs[l]))
        info = []
        lprev = (0, (0, 0))
        rprev = (0, (0, 0))
        for o in s.get_opcodes() :
            if o[0] == 'insert' :
                for i in range(o[3], o[4]) :
                    info.append(('', style(gglyphs[l][i])))
            elif o[0] == 'delete' :
                for i in range(o[1], o[2]) :
                    info.append((style(gglyphs[0][i]), ''))
            elif o[0] == 'replace' :
                for i in range(o[1], o[2]) :
                    info.append((style(gglyphs[0][i]), style(gglyphs[l][i-o[1]+o[3]]) if i-o[1]+o[3] < o[4] else ''))
                for i in range(o[3] + o[2] - o[1], o[4]) :
                    info.append(('', style(gglyphs[l][i])))
            else :
                for i in range(o[1], o[2]) :
                    info.append(diffpos(gglyphs[0][i], gglyphs[l][i-o[1]+o[3]], lprev, rprev))
                    lprev = gglyphs[0][i]
                    rprev = gglyphs[l][i-o[1]+o[3]]
        for inf in zip(*info) :
            f.write(u"    <td class='eq'>{}</td>\n".format("<br/>".join(inf)))
        f.write(u"    <td class='text{0}'{2}>{1}</td>\n".format(l+1, string, langstr))
    f.write("  </tr>\n")

def logend(f) :
    f.write("</body></html>\n");

def dosafecopy(inf, outf, opts, i) :
    pid = os.getpid()
    while os.path.exists(outf+str(pid)) :
        pid += 1
    outlocal = outf + str(pid)
    if opts.strip :
        f = TTFont(inf)
        for t in tables[opts.engine[i] if i < len(opts.engine) else opts.engine[-1]] :
            del f[t]
        f.save(outlocal)
        f.close()
    else :
        shutil.copy2(inf, outlocal)
    try :
        os.rename(outlocal, outf)
    except OSError :
        pass    # don't care if it fails, assuming something else copied it first

def docopy(f, opts, i) :
    # this code is fraught with collision possibilities given there may be 8 runs going simultaneously
    dname = os.path.join(os.path.dirname(opts.output), opts.copy + str(i) + opts.engine[i])
    fname = os.path.join(dname, os.path.basename(f))
    doit = False
    if not os.path.exists(fname) :
        doit = True
        if not os.path.exists(dname) :
            try :
                os.makedirs(dname)
            except OSError, e:
                if e.errno != 17 : raise e     # race condition, job done already
    else :
        bstat = os.stat(f)
        nstat = os.stat(fname)
        if bstat.st_ctime > nstat.st_ctime :
            doit = True
    if doit :
        dosafecopy(f, fname, opts, i)
    return fname

parser = OptionParser(usage = '''%prog [options] infont1 infont2

If the first font is above the output file in the filesystem hierarchy, it may not load.
On firefox, ensure that the configuration option security.fileuri.strict_origin_policy
is set to false to allow locally loaded html files to access fonts anywhere on the
local filesystem. Alternatively use --copy to copy the font and reference that.''')
parser.add_option("-t","--text",help="text file to test each line from")
parser.add_option("-o","--output",help="file to log results to")
parser.add_option("-f","--feat",action="append",help="id=value pairs, may be repeated")
parser.add_option("-e","--engine",action="append",help="renderer(s) to use (ot,gr,hb,icu). Repeatable [gr]")
parser.add_option("-l","--lang",help="language to tag text with")
parser.add_option("-s","--script",help="script of text")
parser.add_option("-r","--rtl",action="store_true",help="right to left")
parser.add_option("-k","--keep",action="store_true",help="keep going, don't return error count")
parser.add_option("-p","--split",action="store_true",help="Split on spaces")
parser.add_option("-L","--label",action="append",help="report font labels")
parser.add_option("--copy",help="Make a conditional copy of infont1 to the given directory relative to the output directory so that the html does not have to look up in the filesystem hierarchy to find the font. The relative directory is suffixed by the font index (1, 2)")
parser.add_option("-S","--strip",action="store_true",help="Strips smart code other than needed by engine, when copying font")
(opts, args) = parser.parse_args()

if not len(args) :
    parser.print_help()
    sys.exit(1)
if not opts.lang : opts.lang = 0
if not opts.script : opts.script = 0
if not opts.rtl : opts.rtl = 0
if not opts.engine or not len(opts.engine) : opts.engine = ['gr']
if opts.output :
    outfile = codecs.open(opts.output, mode="w", encoding="utf_8")
else :
#    outfile = codecs.EncodedFile(sys.stdout, "unicode_internal", file_encoding="utf_8")
    outfile = codecs.getwriter("utf_8")(sys.stdout)

if not opts.label : opts.label = map(lambda x: "Input font{}".format(x+1), range(len(args)))

feats = {}
if opts.feat :
    for f in opts.feat :
        k, v = f.split('=')
        feats[k.strip()] = int(v.strip())

origargs = []
if opts.copy and opts.output :
    for i in range(len(args)) :
        origargs.append(args[i])
        args[i] = docopy(args[i], opts, i)
else :
    origargs = args
fpaths = map(lambda x:os.path.relpath(x, start=(os.path.dirname(opts.output) if opts.output else '.')), args)

fonts = []
tts = []
for i in range(len(args)) :
    while len(opts.engine) < i :
        opts.engine.append(opts.engine[-1])
    fonts.append(make_shaper(opts.engine[i], args[i], 0, opts.rtl, feats, opts.script, opts.lang))
    tts.append(TTFont(args[i]))
f = codecs.open(opts.text, encoding="utf_8")

count = 0
errors = 0
logstarted = False
for l in f.readlines() :
    count += 1
    l = l.strip()
    if opts.split :
        words = l.split()
    else :
        words = (l, )
    wcount = 0
    for s in words :
        wcount += 1
        gls = [map(lambda x: name(tts[0], x), fonts[0].glyphs(s, includewidth = True))]
        if gls[-1][-1][0] is None : gls[-1][-1] = ('_adv_', gls[-1][-1][1])
        logme = len(fonts) < 2
        for i in range(1, len(fonts)) :
            gls.append(map(lambda x: name(tts[i], x), fonts[i].glyphs(s, includewidth = True)))
            if gls[-1][-1][0] is None : gls[-1][-1] = ('_adv_', gls[-1][-1][1])
            if gls[-1] != gls[0] : logme = True
        if logme :
            if not logstarted :
                logstart(outfile, fpaths, opts, args)
                logstarted = True
            bases = map(lambda x: (cmaplookup(tts[0], x), (0,0)), s)
            logentry(outfile, count, wcount, s, gls, opts, bases)
            errors += 1
if logstarted : logend(outfile)
outfile.close()
sys.exit(0 if opts.keep else errors)

