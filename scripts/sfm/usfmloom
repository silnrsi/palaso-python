#!/usr/bin/env python
'''
Interleave 2 or more USFM files renaming tags with per source document suffices.
'''
__version__ = '0.1'
__date__    = '29 October 2009'
__author__  = 'Tim Eves <tim_eves@sil.org>'
__credits__ = ''''''

import palaso.sfm as sfm
from palaso.sfm import usfm, style
from itertools import chain,imap
from functools import partial
import codecs, glob, optparse, operator, os.path, warnings, sys

def foreach(f, *xs):
    def __id(_,__): return None
    reduce(__id, imap(f, *xs), None)
    
class StructureError(StandardError): pass

def validate_structure(*docs):
    def iselement(e): return isinstance(e, sfm.element)
    def _e(name, args, children): return (name,[],filter(iselement, children))
    def _t(t): return ''
    def op(a,b):
        if a != b: raise StructureError, b.source
        return a
    return reduce(op, imap(partial(sfm.smap, _e,_t), docs)) is not None
        
    
def merge(tags, *docs):
    pred = sfm.text_properties('paragraph', 'publishable', 'vernacular')
    assert len(tags) == len(docs), 'not enough tags for supplied documents'
    
    def _relabel(tag, e):
        if isinstance(e, sfm.element):
            foreach(partial(_relabel,tag), e)
            e.name += u'{0!s}{1!s}'.format(opts.seperator,tag)
        else:
            return e

    def _merge(e,*es):
        if isinstance(e, sfm.element):
            if pred(e):
                cs = (e,) + es
                foreach(_relabel, tags, cs)
                return cs
            else:
                e = sfm.element(e.name, e.pos, e.args, content=chain.from_iterable(imap(_merge,e,*es)), meta=e.meta)
                foreach(lambda e_: setattr(e_,'parent',e), e)
                return [e]
        else:
            return [e]
    return chain.from_iterable(imap(_merge,*docs))

        

if __name__ == '__main__':
    parser = optparse.OptionParser(usage='%prog [options] <OUTPUT> <USFM FILE> <USFM FILE> [<USFM FILE> ...]\n' + __doc__)
    parser.add_option("-v","--verbose",action='store_true',default=False,
                      help='Print out statistics and progress info')
    parser.add_option("","--no-warnings",action='store_false',dest='warnings', default=True,
                      help='Silence syntax warnings discovered during SFM parsing')
    parser.add_option("-u","--unused-warning",action='store_true',default=False,
                      help='Print out warnings when possibly unsused words are found.')
    parser.add_option("-s","--strict",action='store_const', dest='error_level', const=usfm.level.Marker, 
                      default=usfm.level.Content,
                      help='Turn on strict parsing mode. Markers not in the stylesheet or private name space will cause an error')
    parser.add_option("-l","--loose",action='store_const', dest='error_level', const=usfm.level.Unrecoverable, 
                      default=usfm.level.Content,
                      help='Turn on loose parsing mode. Nothing short of orphan markers or unterminated inlines will halt the parser.')
    parser.add_option("-S","--stylesheet",action='store',type='string',
                     metavar='PATH', default=None,
                     help='User stylesheet to add/override marker definitions to the default USFM stylesheet')
    parser.add_option("-c","--seperator",action='store',type='string',
                     metavar='SEPERATOR', default='',
                     help='Seperator between marker and source document tag default: \'%default\'')
    parser.add_option("-t","--tags",action='store',type='string',
                     metavar='TAG1,TAG2[,...,TAGN]', default=None,
                     help='Comma separated list of postfix document tags for marker renaming: \'L,[M],R\'')
    
    opts,sfms = parser.parse_args()
    if len(sfms) < 3:
        sys.stderr.write(parser.expand_prog_name('%prog: you need at an output file and least 2 USFMs\n'))
        parser.print_help(file=sys.stderr)
        sys.exit(1)
    if opts.stylesheet:
        stylesheet_path = os.path.expanduser(opts.stylesheet)
        opts.stylesheet = usfm.default_stylesheet.copy()
        opts.stylesheet.update(style.parse(open(stylesheet_path,'r')))
    else:
        opts.stylesheet = usfm.default_stylesheet    
    if not opts.tags:
        if   len(sfms) == 3: opts.tags = ['L','R']
        elif len(sfms) == 4: opts.tags = ['L','M','R']
        else:                opts.tags = range(1,len(sfms))
    else:
        opts.tags = map(operator.methodcaller('strip'), opts.tags.split(','))
    output = codecs.open(os.path.expanduser(sfms[0]), mode='w', encoding='utf_8_sig')
    sfms = chain.from_iterable(imap(glob.iglob, sfms[1:]))  

    try:
        with warnings.catch_warnings():
            warnings.simplefilter("always" if opts.warnings else "ignore", SyntaxWarning)
            docs = map(list, imap(partial(usfm.parser, stylesheet=opts.stylesheet, error_level=opts.error_level),
                      imap(partial(codecs.open, mode='r', encoding='utf_8_sig'), sfms)))
            validate_structure(*docs)

            output.write(sfm.pprint(merge(opts.tags, *docs)))
        
    except IOError, err:
        sys.stderr.write(parser.expand_prog_name('%prog: IO error: {0!s}\n').format(err))
        sys.exit(2)
    except StructureError, err:
        sys.stderr.write(parser.expand_prog_name('%prog: Structure error: A USFM file does not match the others\n').format(err.args[0]))
        sys.exit(3)
        
