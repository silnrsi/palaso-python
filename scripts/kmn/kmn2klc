#!/usr/bin/env python2.6
'''
Generate a Microsoft Keyboard Layout Creator file from a keyman keyboard.
This program will also handle deadkeys in the KMN file.
'''
__version__ = '$Revision: 0.0$'
__date__    = '15 October 2009'
__author__  = 'Martin Hosken <martin_hosken@sil.org>'

import codecs, optparse, os.path, re, sys
from palaso.kmfl import kmfl
from palaso import kmn
from itertools import ifilter, imap
from htmlentitydefs import codepoint2name

def res_str(res) :
    if len(res) > 4 or len(res) == 0 : return None
    codes = []
    for r in res :
        if item_type(r) > 0 : return None
        else :
            codes.append("%04X" % (r & 0xFFFF))
    return ("\t".join(codes))

def item_type(x) : return (x >> 24) & 0xFF

key_tops  = r'''`1234567890-=QWERTYUIOP[]\ASDFGHJKL;'ZXCVBNM,./'''
shifted   = r'''~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?'''
unshifted = r'''`1234567890-=qwertyuiop\[]\\asdfghjkl;'zxcvbnm,./'''


header = u'''\
\uFEFFKBD     {0}     "{1}"

COPYRIGHT   "{2}"

COMPANY     "{3}"

LOCALENAME  "en-US"

LOCALEID    "00000409"

VERSION 1.0

SHIFTSTATE

0       // Column 4
1       // Column 5 : Shift

LAYOUT      ; an extra @ at the end is a dead key

//SC    VK_         Cap     0       1
//--    ----        ----    ----    ----

'''.format

key = u'''{0:2x}     {1}         {2}     {3}     {4}'''.format

lighead = u'''
LIGATURE

//VK_   Mod #   Char0   Char1   Char2   Char3
//---   -----   -----   -----   -----   -----
'''

lig = u'''{0}     {1}     {2}'''.format

footer = u'''
DESCRIPTIONS

0409    {0}
LANGUAGENAMES

0409    English (United States)
ENDKBD
'''.format

parser = optparse.OptionParser(usage='%prog [options] <KEYMAN FILE>\n' + __doc__)
parser.add_option("-n","--name", action='store', help='MSKLC Project name')

(opts,kmns) = parser.parse_args()
if len(kmns) == 0:
    sys.stderr.write(parser.expand_prog_name('%prog: missing KEYMAN FILE\n'))
    parser.print_help(file=sys.stderr)
    sys.exit(1)

kb = kmns[0]
if not opts.name :
    opts.name = re.sub(r'\..*$', '', os.path.basename(kb)).replace(' ', '')

km = kmfl(kb)
sys.stdout = codecs.getwriter("utf_16_le")(sys.stdout)
print header(opts.name, km.store('NAME'), km.store('COPYRIGHT'), km.store('AUTHOR'))

deads = []
ligs = []
keys = [[None] * 2 for i in xrange(255)]    # declare array keys[255][2] !!
keynames = [None] * 255
ekeynames = [None] * 255
for k in shifted + unshifted :
    ksym = kmn.char_keysym(k)
    sc, vkey, mod, kn, ekn = kmn.keysym_klcinfo(ksym)
    keynames[sc] = kn
    ekeynames[sc] = ekn
    res = km.interpret_items([kmn.keysym_item(ksym)])
    if (res[0] >> 24) == 5 :
        deads.append([ksym,{},0])
    elif len(res) > 1 :
        ligs.append((vkey, mod, res))
        keys[sc][mod] = (sc, vkey, 2)
    else :
        keys[sc][mod] = (sc, vkey, 0, res)

for d in deads :
    for k in shifted + unshifted :
        ksym = kmn.char_keysym(k)
        res = km.interpret_items([kmn.keysym_item(ksym)])
        d[1][k] = res
        if ksym == d[0] :
            sc, vkey, mod, kn, ekn = kmn.keysym_klcinfo(ksym)
            keys[sc][mod] = (sc, vkey, 1, res)
            d[2] = res[0]

for s in keys :
    sc = None
    vk = None
    if not s : continue
    res = [-1] * 2
    for m in range(2) :
        if not s[m] : continue
        sc = s[m][0]
        vk = s[m][1]
        if s[m][2] == 2 :
            res[m] = '%%'
        else :
            res[m] = "%04X" % (ord(kmn.item_to_char(s[m][3][0])))
        if s[m][2] == 1 and res[m] != '-1' :
            res[m] += "@"
    if sc :
        print key(sc, vk, 0, res[0], res[1])

if len(deads) > 0 :
    for d in deads :
        if not d : continue
        print "\nDEADKEY %04X\n" % (d[2] & 0xFFFF)
        for k in d[1] :
            res = res_str(d[1][k])
            if res :
                print "%04X\t%s" % (ord(k), res)

if len(ligs) > 0 :
    print lighead
    for l in ligs :
        codestr = res_str(l[2])
        print lig(l[0], l[1], codestr)

print "\nKEYNAME\n"
for i in xrange(len(keynames)) :
    if keynames[i] :
        if keynames[i].find(" ") >= 0 :
            print '%02x\t"%s"' % (i, keynames[i])
        else :
            print '%02x\t%s' % (i, keynames[i])

print "\nKEYNAME_EXT\n"
for i in xrange(len(ekeynames)) :
    if ekeynames[i] :
        if ekeynames[i].find(" ") >= 0:
            print '%02x\t"%s"' % (i, ekeynames[i])
        else :
            print '%02x\t%s' % (i, ekeynames[i])

print "\nENDKBD"

